{"level":"error","message":{"content":{},"title":"teste"},"pid":71675,"requestId":"6960c73a-1ce1-4d80-9b6e-e203f524052a","timestamp":"2023-04-29T17:39:36.312Z"}
{"level":"error","message":{"content":{"code":500,"message":"User already exists","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":198,"requestId":"d2eb585d-42d8-4806-b2e3-30a58089beb2","timestamp":"2023-05-09T13:09:46.612Z"}
{"level":"error","message":{"content":{"code":500,"message":"User already exists","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1555,"requestId":"083bddba-3fa4-4437-b220-bface9982a31","timestamp":"2023-05-09T14:04:58.541Z"}
{"level":"error","message":{"content":{"code":500,"message":"Nickname already been taken","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1555,"requestId":"083bddba-3fa4-4437-b220-bface9982a31","timestamp":"2023-05-09T14:05:26.760Z"}
{"level":"error","message":{"content":{"code":500,"message":"Nickname already been taken","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":52,"requestId":"6a6b051e-8b20-406a-a824-8cf87ac9a7ed","timestamp":"2023-05-10T01:12:51.066Z"}
{"level":"error","message":{"content":{"code":403,"message":"A Bearer token must be provided to be auth","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":562,"requestId":"feb07169-91ff-4fac-a27b-386a1f4248fd","timestamp":"2023-05-11T00:08:42.802Z"}
{"level":"error","message":{"content":{"code":403,"message":"A Bearer token must be provided to be auth","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":52,"requestId":"6718f775-610b-4d0d-ac95-4596d17643c4","timestamp":"2023-05-11T11:49:38.941Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":52,"requestId":"6718f775-610b-4d0d-ac95-4596d17643c4","timestamp":"2023-05-11T11:50:08.892Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":52,"requestId":"6718f775-610b-4d0d-ac95-4596d17643c4","timestamp":"2023-05-11T11:50:15.464Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":126,"requestId":"8a0d3eab-be53-4c88-ab3b-44342c185195","timestamp":"2023-05-11T11:50:54.534Z"}
{"level":"error","message":{"content":{"code":500,"message":"Shelf already exist","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1327,"requestId":"982102ee-903f-4eb7-ba7b-e1c3489aa632","timestamp":"2023-05-11T13:38:45.678Z"}
{"level":"error","message":{"content":{"code":500,"message":"Shelf already exist","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1401,"requestId":"b12d1b31-f99b-40b6-b61e-f2f153c1be4b","timestamp":"2023-05-11T13:39:14.725Z"}
{"level":"error","message":{"content":{"code":500,"message":"Shelf already exist","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1401,"requestId":"b12d1b31-f99b-40b6-b61e-f2f153c1be4b","timestamp":"2023-05-11T13:39:24.277Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":1401,"requestId":"b12d1b31-f99b-40b6-b61e-f2f153c1be4b","timestamp":"2023-05-11T13:39:28.912Z"}
{"level":"error","message":{"content":{"code":500,"message":"Shelf already exist","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1474,"requestId":"53665c9c-d144-42dc-9141-958ca2df46e6","timestamp":"2023-05-11T13:40:25.096Z"}
{"level":"error","message":{"content":{"code":403,"message":"A Bearer token must be provided to be auth","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":2763,"requestId":"e65ca136-f05a-4850-9d4d-ae516f5294f0","timestamp":"2023-05-11T16:43:15.618Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":2763,"requestId":"e65ca136-f05a-4850-9d4d-ae516f5294f0","timestamp":"2023-05-11T16:43:33.897Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update({\n          where: {\n            id: '13'\n                ~~~~\n          },\n          data: {\n            name: 'testeeeee'\n          }\n        })\n\nArgument id: Got invalid value '13' on prisma.updateOneShelf. Provided String, expected Int.\n\n","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":2763,"requestId":"e65ca136-f05a-4850-9d4d-ae516f5294f0","timestamp":"2023-05-11T16:52:35.181Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update({\n          where: {\n            id: '13'\n                ~~~~\n          },\n          data: {\n            name: 'testeeeee'\n          }\n        })\n\nArgument id: Got invalid value '13' on prisma.updateOneShelf. Provided String, expected Int.\n\n","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":2838,"requestId":"71905aa8-92f0-4d51-a01d-b00e13ea0dd4","timestamp":"2023-05-11T17:11:13.909Z"}
{"level":"error","message":{"content":{"code":401,"message":"User are unauthorized","name":"Unauthorized","status":"error"},"title":"API Reponse Error"},"pid":2838,"requestId":"71905aa8-92f0-4d51-a01d-b00e13ea0dd4","timestamp":"2023-05-11T19:30:37.855Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update({\n          where: {\n            id: '13'\n                ~~~~\n          },\n          data: {\n            name: 'testeeeee'\n          }\n        })\n\nArgument id: Got invalid value '13' on prisma.updateOneShelf. Provided String, expected Int.\n\n","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":2838,"requestId":"71905aa8-92f0-4d51-a01d-b00e13ea0dd4","timestamp":"2023-05-11T19:30:53.356Z"}
{"level":"error","message":{"content":{"code":401,"message":"User are unauthorized","name":"Unauthorized","status":"error"},"title":"API Reponse Error"},"pid":3008,"requestId":"f4a1eb6e-7a31-48f8-ba4c-0640d2e58283","timestamp":"2023-05-11T19:32:02.864Z"}
{"level":"error","message":{"content":{"code":500,"message":"This name is already been used by other shelf.","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":3008,"requestId":"f4a1eb6e-7a31-48f8-ba4c-0640d2e58283","timestamp":"2023-05-11T19:32:26.450Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":4025,"requestId":"2e0f9d50-0ee6-4d2e-b542-5dc7545489be","timestamp":"2023-05-11T19:50:00.392Z"}
{"level":"error","message":{"content":{"code":500,"message":"Shelf already exist","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1257,"requestId":"3f267a37-70bb-46cd-86ee-212d969fd17d","timestamp":"2023-05-12T12:56:05.109Z"}
{"level":"error","message":{"content":{"code":401,"message":"User are unauthorized","name":"Unauthorized","status":"error"},"title":"API Reponse Error"},"pid":1257,"requestId":"3f267a37-70bb-46cd-86ee-212d969fd17d","timestamp":"2023-05-12T12:56:31.725Z"}
{"level":"error","message":{"content":{"code":401,"message":"User are unauthorized","name":"Unauthorized","status":"error"},"title":"API Reponse Error"},"pid":1257,"requestId":"3f267a37-70bb-46cd-86ee-212d969fd17d","timestamp":"2023-05-12T12:56:55.019Z"}
{"level":"error","message":{"content":{"code":403,"message":"User is trying to update other user shelf","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":1257,"requestId":"3f267a37-70bb-46cd-86ee-212d969fd17d","timestamp":"2023-05-12T12:58:01.369Z"}
{"level":"error","message":{"content":{"code":500,"message":"Shelf already exist","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":2616,"requestId":"5bcdc82a-aec8-40a8-90c3-70ced1891160","timestamp":"2023-05-12T13:04:12.686Z"}
{"level":"error","message":{"content":{"code":500,"message":"Cannot set headers after they are sent to the client","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":2616,"requestId":"5bcdc82a-aec8-40a8-90c3-70ced1891160","timestamp":"2023-05-12T13:04:25.036Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":2616,"requestId":"5bcdc82a-aec8-40a8-90c3-70ced1891160","timestamp":"2023-05-12T13:04:38.496Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":2783,"requestId":"a6afa9e8-462d-4394-89ee-0d6698cffa3a","timestamp":"2023-05-12T13:05:28.096Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":3126,"requestId":"e9950851-d84d-42fa-b529-4a3e66087cab","timestamp":"2023-05-12T13:07:27.581Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":3126,"requestId":"e9950851-d84d-42fa-b529-4a3e66087cab","timestamp":"2023-05-12T13:07:29.030Z"}
{"level":"error","message":{"content":{"code":500,"message":"Unexpected token } in JSON at position 47","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":3126,"requestId":"e9950851-d84d-42fa-b529-4a3e66087cab","timestamp":"2023-05-12T13:07:38.873Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":4688,"requestId":"ddf22423-424b-4d14-bdd5-4b08a45db190","timestamp":"2023-05-12T16:55:07.612Z"}
{"level":"error","message":{"content":{"code":500,"message":"Shelf already exist","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":4688,"requestId":"ddf22423-424b-4d14-bdd5-4b08a45db190","timestamp":"2023-05-12T16:55:20.839Z"}
{"level":"error","message":{"content":{"code":401,"message":"User are unauthorized","name":"Unauthorized","status":"error"},"title":"API Reponse Error"},"pid":402,"requestId":"b296a2ff-48b8-4a5a-84c6-e42d7e75eb36","timestamp":"2023-05-15T14:57:41.144Z"}
{"level":"error","message":{"content":{"code":401,"message":"User are unauthorized","name":"Unauthorized","status":"error"},"title":"API Reponse Error"},"pid":319,"requestId":"1dc31c02-e4b7-4227-ab3f-af829491d80e","timestamp":"2023-05-15T17:07:03.877Z"}
{"level":"error","message":{"content":{"code":401,"message":"User are unauthorized","name":"Unauthorized","status":"error"},"title":"API Reponse Error"},"pid":51,"requestId":"e4c6a502-ee2c-4daf-a175-e6b53a80b7a8","timestamp":"2023-05-15T23:16:18.279Z"}
{"level":"error","message":{"content":{"code":403,"message":"User is trying to update other user shelf","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":51,"requestId":"e4c6a502-ee2c-4daf-a175-e6b53a80b7a8","timestamp":"2023-05-15T23:16:35.254Z"}
{"level":"error","message":{"content":{"code":403,"message":"User is trying to update other user shelf","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":51,"requestId":"e4c6a502-ee2c-4daf-a175-e6b53a80b7a8","timestamp":"2023-05-15T23:17:08.472Z"}
{"level":"error","message":{"content":{"code":403,"message":"User is trying to update other user shelf","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":268,"requestId":"bc57a08b-65f6-43cf-8cf1-5f5412f8461f","timestamp":"2023-05-15T23:18:33.182Z"}
{"level":"error","message":{"content":{"code":403,"message":"User is trying to update other user shelf","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":354,"requestId":"f9f53e37-6b19-49d0-a71c-dde10ef0050d","timestamp":"2023-05-15T23:19:05.339Z"}
{"level":"error","message":{"content":{"code":403,"message":"User is trying to update other user shelf","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":546,"requestId":"4acb1449-1d79-43f5-9dc2-059abf3c897b","timestamp":"2023-05-15T23:20:14.201Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update(\nUnique constraint failed on the fields: (`book_id`,`shelf_id`)","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":642,"requestId":"2c656f43-40f7-4b55-8aa3-bd0aa8e0eda6","timestamp":"2023-05-15T23:21:51.644Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update(\nUnique constraint failed on the fields: (`book_id`,`shelf_id`)","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":642,"requestId":"2c656f43-40f7-4b55-8aa3-bd0aa8e0eda6","timestamp":"2023-05-15T23:23:30.254Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.book.findUnique()` invocation in\n/app/src/repositories/prisma/prisma.book.repository.ts:12:24\n\n   9   })\n  10 }\n  11 findUnique(whereFields: object): Promise<Book | null> {\n→ 12   return prisma.book.findUnique({\n         where: {\n           google_book_id: 'eVevDwAAQBAJ',\n           shelves: {\n           ~~~~~~~\n             some: {\n               name: 'Romance'\n             }\n           }\n         }\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n       })\n\nArgument where of type BookWhereUniqueInput needs exactly one argument, but you provided google_book_id and shelves. Please choose one. Available args: \ntype BookWhereUniqueInput {\n  id?: Int\n  google_book_id?: String\n}\nUnknown arg `shelves` in where.shelves for type BookWhereUniqueInput. Did you mean `select`? Available args:\ntype BookWhereUniqueInput {\n  id?: Int\n  google_book_id?: String\n}\n\n","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":798,"requestId":"e3d5910a-7a95-45e3-bbf7-bf155f0ae841","timestamp":"2023-05-15T23:30:21.883Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.book.create()` invocation in\n/app/src/repositories/prisma/prisma.book.repository.ts:7:24\n\n  4 \n  5 export class PrismaBookRepository implements BookRepository {\n  6   create(createBookData: any): Promise<Book> {\n→ 7     return prisma.book.create(\nUnique constraint failed on the fields: (`google_book_id`)","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":107,"requestId":"30dcc77f-7c4f-40a9-9794-7fb40f9245d7","timestamp":"2023-05-15T23:41:36.633Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update(\nUnique constraint failed on the fields: (`book_id`,`shelf_id`)","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":281,"requestId":"6847dc59-24ab-40ec-96aa-8652af97af79","timestamp":"2023-05-15T23:42:13.900Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update(\nUnique constraint failed on the fields: (`book_id`,`shelf_id`)","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":355,"requestId":"8a2c4d6e-589d-4829-b60f-8f88b3f9fa05","timestamp":"2023-05-15T23:42:31.746Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update(\nUnique constraint failed on the fields: (`book_id`,`shelf_id`)","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":482,"requestId":"45ee40ae-6ecc-468d-ac59-3c3195d699e3","timestamp":"2023-05-15T23:43:04.185Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update(\nUnique constraint failed on the fields: (`book_id`,`shelf_id`)","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":555,"requestId":"feb6252e-6961-49f3-a0a4-8459d9929ab0","timestamp":"2023-05-15T23:43:30.862Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.book.findFirst()` invocation in\n/app/src/repositories/prisma/prisma.book.repository.ts:7:24\n\n  4 \n  5 export class PrismaBookRepository implements BookRepository {\n  6   findFirst(whereFields: object): Promise<Book | null> {\n→ 7     return prisma.book.findFirst({\n          where: {\n            where: {\n            ~~~~~\n              google_book_id: 'eVevDwAAQBAJ',\n              shelves: {\n                some: {\n                  shelf: {\n                    name: 'Romance'\n                  }\n                }\n              }\n            }\n          }\n        })\n\nUnknown arg `where` in where.where for type BookWhereInput. Did you mean `title`? Available args:\ntype BookWhereInput {\n  AND?: BookWhereInput | List<BookWhereInput>\n  OR?: List<BookWhereInput>\n  NOT?: BookWhereInput | List<BookWhereInput>\n  id?: IntFilter | Int\n  google_book_id?: StringFilter | String\n  title?: StringFilter | String\n  publisher?: PublisherRelationFilter | PublisherWhereInput | Null\n  publisher_id?: IntNullableFilter | Int | Null\n  published_date?: DateTimeFilter | DateTime\n  description?: StringFilter | String\n  page_count?: IntFilter | Int\n  main_category?: StringNullableFilter | String | Null\n  average_rating?: FloatNullableFilter | Float | Null\n  image_link_small?: StringNullableFilter | String | Null\n  image_link_medium?: StringNullableFilter | String | Null\n  image_link_large?: StringNullableFilter | String | Null\n  language?: StringFilter | String\n  list_price_amount?: FloatNullableFilter | Float | Null\n  list_price_currency?: StringNullableFilter | String | Null\n  categories_books?: CategoriesOnBooksListRelationFilter\n  authors?: AuthorsOnBooksListRelationFilter\n  shelves?: BooksOnShelvesListRelationFilter\n  createdAt?: DateTimeFilter | DateTime\n  updatedAt?: DateTimeFilter | DateTime\n}\n\n","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":763,"requestId":"03d08f9d-ec01-4bc7-9d12-f1de4e1b5693","timestamp":"2023-05-15T23:47:04.210Z"}
{"level":"error","message":{"content":{"code":500,"message":"Cannot read properties of undefined (reading 'id')","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":847,"requestId":"8bb131be-9d69-469b-91e3-91440ec7f6aa","timestamp":"2023-05-15T23:48:07.346Z"}
{"level":"error","message":{"content":{"code":500,"message":"Cannot read properties of undefined (reading 'id')","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":920,"requestId":"ec549317-8540-4e04-85e0-24c0fb865859","timestamp":"2023-05-15T23:48:27.196Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.book.create()` invocation in\n/app/src/repositories/prisma/prisma.book.repository.ts:12:24\n\n   9   })\n  10 }\n  11 create(createBookData: any): Promise<Book> {\n→ 12   return prisma.book.create(\nUnique constraint failed on the fields: (`google_book_id`)","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1068,"requestId":"c781dc72-b421-4664-942e-8cd594166d54","timestamp":"2023-05-15T23:49:58.635Z"}
{"level":"error","message":{"content":{"code":500,"message":"Cannot read properties of undefined (reading 'id')","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1142,"requestId":"69aa3b6a-63ad-4cb7-b2ad-683e93e8f373","timestamp":"2023-05-15T23:50:14.891Z"}
{"level":"error","message":{"content":{"code":500,"message":"Cannot read properties of undefined (reading 'id')","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1362,"requestId":"816ed3d2-7a88-499a-a1b6-d9f56143a570","timestamp":"2023-05-15T23:54:47.846Z"}
{"level":"error","message":{"content":{"code":500,"message":"Cannot read properties of undefined (reading 'id')","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1436,"requestId":"232e322e-f1f8-4628-b47f-72e4cde05c45","timestamp":"2023-05-15T23:55:08.557Z"}
{"level":"error","message":{"content":{"code":500,"message":"Cannot read properties of undefined (reading 'id')","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1568,"requestId":"eaac2036-d697-4647-b363-5b004d14439a","timestamp":"2023-05-15T23:55:50.260Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.shelf.update()` invocation in\n/app/src/repositories/prisma/prisma.shelf.repository.ts:7:25\n\n  4 \n  5 export class PrismaShelfRepository implements ShelfRepository {\n  6   update(whereFields: object, data: object): Promise<Shelf> {\n→ 7     return prisma.shelf.update(\nUnique constraint failed on the fields: (`book_id`,`shelf_id`)","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":1736,"requestId":"8420dcc7-8533-4ddc-aaca-70fc931e1416","timestamp":"2023-05-15T23:57:05.959Z"}
{"level":"error","message":{"content":{"code":401,"message":"User are unauthorized","name":"Unauthorized","status":"error"},"title":"API Reponse Error"},"pid":90,"requestId":"58286740-28e9-47f4-abbf-6c30187ef0cb","timestamp":"2023-05-16T11:30:35.254Z"}
{"level":"error","message":{"content":{"code":500,"message":"\nInvalid `prisma.booksOnShelves.findUnique()` invocation in\n/app/src/repositories/prisma/prisma.book-shelf.repository.ts:7:34\n\n  4 \n  5 export class PrismaBookShelfRepository implements BookShelfRepository {\n  6   findUnique(whereFields: object): Promise<BooksOnShelves | null> {\n→ 7     return prisma.booksOnShelves.findUnique({\n          where: {\n            book_id: 3,\n            ~~~~~~~\n            shelf_id: 24\n            ~~~~~~~~\n          }\n          ~~~~~~~~~~~~~~\n        })\n\nArgument where of type BooksOnShelvesWhereUniqueInput needs exactly one argument, but you provided book_id and shelf_id. Please choose one. Available args: \ntype BooksOnShelvesWhereUniqueInput {\n  book_id_shelf_id?: BooksOnShelvesBook_idShelf_idCompoundUniqueInput\n}\nUnknown arg `book_id` in where.book_id for type BooksOnShelvesWhereUniqueInput. Did you mean `select`? Available args:\ntype BooksOnShelvesWhereUniqueInput {\n  book_id_shelf_id?: BooksOnShelvesBook_idShelf_idCompoundUniqueInput\n}\nUnknown arg `shelf_id` in where.shelf_id for type BooksOnShelvesWhereUniqueInput. Did you mean `select`? Available args:\ntype BooksOnShelvesWhereUniqueInput {\n  book_id_shelf_id?: BooksOnShelvesBook_idShelf_idCompoundUniqueInput\n}\n\n","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":90,"requestId":"58286740-28e9-47f4-abbf-6c30187ef0cb","timestamp":"2023-05-16T11:30:53.435Z"}
{"level":"error","message":{"content":{"code":500,"message":"This book already have this shelf.","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":355,"requestId":"f7b51e94-653d-40c0-b146-2d041bd22f03","timestamp":"2023-05-16T11:32:57.837Z"}
{"level":"error","message":{"content":{"code":422,"message":"This book already have this shelf.","name":"Unprocessable Entity","status":"error"},"title":"API Reponse Error"},"pid":511,"requestId":"cf86623e-5ef2-4cf5-a75e-9081a90ff430","timestamp":"2023-05-16T11:34:42.742Z"}
{"level":"error","message":{"content":{"code":422,"message":"This book already have this shelf.","name":"Unprocessable Entity","status":"error"},"title":"API Reponse Error"},"pid":511,"requestId":"cf86623e-5ef2-4cf5-a75e-9081a90ff430","timestamp":"2023-05-16T11:35:15.754Z"}
{"level":"error","message":{"content":{"code":403,"message":"A shelf can not be create with another User ID","name":"Forbidden","status":"error"},"title":"API Reponse Error"},"pid":511,"requestId":"cf86623e-5ef2-4cf5-a75e-9081a90ff430","timestamp":"2023-05-16T11:35:22.645Z"}
{"level":"error","message":{"content":{"code":404,"message":"The shelf id provided does not exist","name":"Not Found","status":"error"},"title":"API Reponse Error"},"pid":511,"requestId":"cf86623e-5ef2-4cf5-a75e-9081a90ff430","timestamp":"2023-05-16T11:35:30.306Z"}
{"level":"error","message":{"content":{"code":500,"message":"Request failed with status code 503","name":"Internal Server Error","status":"error"},"title":"API Reponse Critical"},"pid":808,"requestId":"f767acfa-b0ab-47cb-a34f-0482bd385e82","timestamp":"2023-05-16T11:40:01.664Z"}
{"level":"error","message":{"content":{"code":404,"message":"Provided Google Book ID not found","name":"Not Found","status":"error"},"title":"API Reponse Error"},"pid":925,"requestId":"cc7ab95f-1390-47b8-aa8c-077784955bd0","timestamp":"2023-05-16T11:41:19.076Z"}
{"level":"error","message":{"content":{"code":422,"message":"This book already have this shelf.","name":"Unprocessable Entity","status":"error"},"title":"API Reponse Error"},"pid":999,"requestId":"17122e96-ad13-45df-974f-4461e5f720ca","timestamp":"2023-05-16T11:42:29.730Z"}
{"level":"error","message":{"content":{"code":422,"message":"This book is not in shelf","name":"Unprocessable Entity","status":"error"},"title":"API Reponse Error"},"pid":2886,"requestId":"be6c41cf-6579-4327-a1bf-272771376bd5","timestamp":"2023-05-16T12:39:38.282Z"}
